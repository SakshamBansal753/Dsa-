/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //  void inorder(TreeNode* root, vector<int>& ans) {
    //     if (!root) return;
    //     inorder(root->left, ans);
    //     ans.push_back(root->val);
    //     inorder(root->right, ans);
    // }
    
    vector<int> inorderTraversal(TreeNode* root) {
        // vector<int> ans;
        // inorder(root, ans);
        // return ans;
    //MORRIS TRAVERSAL
        vector<int>ans;
        TreeNode* curr=root;
        while(curr!=NULL){
            if(!curr->left){
                ans.push_back(curr->val);
                curr=curr->right;
            }else{
                TreeNode* IP=curr->left;
                while(IP->right&&IP->right!=curr){
                    IP=IP->right;
                }
                if(!IP->right){
                    IP->right=curr;
                    curr=curr->left;
                }else{
                    IP->right=NULL;
                    ans.push_back(curr->val);
                    curr=curr->right;
                }
            }
        }
        return ans;
    }
           

    
};
//Above have both recursion and morris traversal
